// src/pages/vulnerabilities/VulnerabilityDetailsPage.jsx
import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  AlertTriangle,
  CheckCircle,
  Loader,
  ArrowLeft,
  Shield,
  Info,
  Copy,
  ExternalLink,
  Search,
  Globe,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { vulnerabilityScraper } from '../../services/scraping/vulnerabilityScraper';
import { SeverityBadge } from '../../components/vulnerability/SeverityBadge';
import { SourceSelector } from '../../components/vulnerability/SourceSelector';
import { getImageDetails } from '../../services/aws/ecr';
import useAuthStore from '../../store/authStore';

export default function VulnerabilityDetailsPage() {
  const navigate = useNavigate();
  // Update the parameter names to match your route
  const { name: repositoryName, imageDigest } = useParams();
  const awsCredentials = useAuthStore((state) => state.awsCredentials);

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [imageDetails, setImageDetails] = useState(null);
  const [isScraperRunning, setIsScraperRunning] = useState(false);
  const [scraperError, setScraperError] = useState(null);
  const [selectedSources, setSelectedSources] = useState(['official']);
  const [isCopied, setIsCopied] = useState(false);

  useEffect(() => {
    console.log('Params:', { repositoryName, imageDigest }); // Debug log

    const fetchDetails = async () => {
      try {
        setLoading(true);
        setError(null);

        // Validate required parameters
        if (!repositoryName) {
          throw new Error('Repository name is missing from URL');
        }

        if (!imageDigest) {
          throw new Error('Image digest is missing from URL');
        }

        if (!awsCredentials) {
          throw new Error('AWS credentials are not available');
        }

        console.log('Fetching details for:', { repositoryName, imageDigest }); // Debug log

        const details = await getImageDetails(
          awsCredentials,
          repositoryName,
          imageDigest
        );

        if (!details) {
          throw new Error('No image details found');
        }

        setImageDetails({
          imageTag: details.imageTags?.[0] || 'untagged',
          findings: details.imageScanFindings?.findings || [],
          lastScanAt: details.imageScanFindings?.imageScanCompletedAt,
        });
      } catch (err) {
        console.error('Error fetching image details:', err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchDetails();
  }, [repositoryName, imageDigest, awsCredentials]);

  const handleSourceToggle = (sourceId) => {
    if (sourceId === 'official') {
      setSelectedSources((prev) =>
        prev.includes(sourceId)
          ? prev.filter((id) => id !== sourceId)
          : [...prev, sourceId]
      );
    }
  };

  const handleRunScraper = async (finding) => {
    if (!finding.uri) {
      setScraperError('No vulnerability URI available for scraping');
      return;
    }

    setIsScraperRunning(true);
    setScraperError(null);

    try {
      await vulnerabilityScraper.scrapeVulnerabilityDetails(finding.uri);
    } catch (error) {
      setScraperError(
        `Failed to scrape vulnerability details: ${error.message}`
      );
    } finally {
      setIsScraperRunning(false);
    }
  };

  const copyDigest = async () => {
    await navigator.clipboard.writeText(imageDigest);
    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
  };

  // Add debug information section
  const renderDebugInfo = () => (
    <div className="bg-gray-100 p-4 rounded-lg mb-4 text-sm">
      <h3 className="font-medium mb-2">Debug Information</h3>
      <p>Repository Name: {repositoryName || 'Not set'}</p>
      <p>Image Digest: {imageDigest || 'Not set'}</p>
      <p>AWS Region: {awsCredentials?.region || 'Not set'}</p>
    </div>
  );

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader className="w-8 h-8 animate-spin text-blue-600" />
        <span className="ml-2">Loading details...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6 space-y-4">
        {renderDebugInfo()}
        <Alert variant="destructive">
          <AlertDescription className="flex items-center">
            <AlertTriangle className="w-4 h-4 mr-2" />
            {error}
          </AlertDescription>
        </Alert>
        <button
          onClick={() => navigate(-1)}
          className="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Go Back
        </button>
      </div>
    );
  }

  const severityCounts = imageDetails.findings.reduce((acc, finding) => {
    acc[finding.severity] = (acc[finding.severity] || 0) + 1;
    return acc;
  }, {});

  return (
    <div className="min-h-screen bg-gray-50/50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-4">
            <div className="flex items-center">
              <button
                onClick={() => navigate(-1)}
                className="mr-4 p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <ArrowLeft className="w-5 h-5 text-gray-500" />
              </button>
              <div>
                <h1 className="text-xl font-semibold text-gray-900">
                  Vulnerability Analysis
                </h1>
                <p className="text-sm text-gray-500 mt-0.5">
                  Repository: {repositoryName}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="space-y-6">
          {/* Severity Overview */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center mb-4">
              <Shield className="w-5 h-5 text-gray-500 mr-2" />
              <h2 className="text-lg font-medium text-gray-900">
                Vulnerability Summary
              </h2>
            </div>
            <div className="grid grid-cols-5 gap-4">
              {['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'INFORMATIONAL'].map(
                (severity) => (
                  <SeverityBadge
                    key={severity}
                    severity={severity}
                    count={
                      imageDetails?.findings?.filter(
                        (f) => f.severity === severity
                      ).length || 0
                    }
                  />
                )
              )}
            </div>
          </div>

          {/* Image Details Card */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-lg font-medium text-gray-900">
                    Image Details
                  </h2>
                  <p className="text-sm text-gray-500 mt-1">
                    Tag: {imageDetails?.imageTag || 'untagged'}
                  </p>
                </div>
                <button
                  onClick={copyDigest}
                  className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
                  title="Copy digest"
                >
                  {isCopied ? (
                    <CheckCircle className="w-5 h-5 text-green-600" />
                  ) : (
                    <Copy className="w-5 h-5" />
                  )}
                </button>
              </div>
              <div className="mt-4 font-mono text-sm text-gray-600 break-all">
                {imageDigest}
              </div>
            </div>
          </div>

          {/* Findings Section */}
          <div className="space-y-4">
            {imageDetails?.findings?.map((finding) => (
              <div
                key={finding.name}
                className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"
              >
                {/* Finding Header */}
                <div className="flex justify-between items-start mb-4">
                  <h3 className="text-lg font-medium text-gray-900">
                    {finding.name}
                  </h3>
                  <span
                    className={`px-2 py-1 rounded-full text-xs font-medium ${
                      finding.severity === 'CRITICAL'
                        ? 'bg-red-100 text-red-800'
                        : finding.severity === 'HIGH'
                        ? 'bg-orange-100 text-orange-800'
                        : finding.severity === 'MEDIUM'
                        ? 'bg-yellow-100 text-yellow-800'
                        : finding.severity === 'LOW'
                        ? 'bg-blue-100 text-blue-800'
                        : 'bg-gray-100 text-gray-800'
                    }`}
                  >
                    {finding.severity}
                  </span>
                </div>

                {/* Finding Description */}
                <p className="text-gray-600 mb-6">{finding.description}</p>

                {/* Source Selection */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <h4 className="text-sm font-medium text-gray-900 mb-4 flex items-center">
                    <Globe className="w-4 h-4 mr-1.5" />
                    Select Analysis Sources
                  </h4>
                  <SourceSelector
                    selectedSources={selectedSources}
                    onSourceToggle={handleSourceToggle}
                    finding={finding}
                  />

                  {/* Analyze Button */}
                  <div className="mt-4 bg-white/80 backdrop-blur-sm py-3 border-t border-gray-200">
                    <button
                      onClick={() => handleRunScraper(finding)}
                      disabled={
                        isScraperRunning || selectedSources.length === 0
                      }
                      className={`
                        w-full inline-flex items-center justify-center px-4 py-2.5 
                        text-sm font-medium rounded-lg transition-all duration-200
                        ${
                          selectedSources.length > 0
                            ? 'text-white bg-gray-900 hover:bg-gray-800'
                            : 'text-gray-400 bg-gray-100 cursor-not-allowed'
                        }
                        disabled:opacity-50
                      `}
                    >
                      {isScraperRunning ? (
                        <>
                          <Loader className="w-4 h-4 mr-2 animate-spin" />
                          <span>Analyzing Sources...</span>
                        </>
                      ) : (
                        <>
                          <Search className="w-4 h-4 mr-2" />
                          <span>
                            {selectedSources.length > 0
                              ? 'Analyze Selected Sources'
                              : 'Select a source to analyze'}
                          </span>
                        </>
                      )}
                    </button>
                  </div>
                </div>

                {/* Scraper Error */}
                {scraperError && (
                  <div className="mt-4">
                    <Alert variant="destructive">
                      <AlertDescription className="flex items-center">
                        <AlertTriangle className="w-4 h-4 mr-2" />
                        {scraperError}
                      </AlertDescription>
                    </Alert>
                  </div>
                )}

                {/* Remediation Section */}
                {finding.remediation && (
                  <div className="mt-6 bg-blue-50 rounded-lg p-4">
                    <div className="flex items-center text-sm font-medium text-blue-800 mb-2">
                      <Info className="w-4 h-4 mr-1.5" />
                      Recommended Fix
                    </div>
                    <p className="text-sm text-blue-700">
                      {finding.remediation}
                    </p>
                  </div>
                )}

                {/* Reference Links */}
                {finding.uri && (
                  <div className="mt-4 flex justify-end">
                    <a
                      href={finding.uri}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-800 text-sm flex items-center"
                    >
                      View Official Source{' '}
                      <ExternalLink className="w-4 h-4 ml-1" />
                    </a>
                  </div>
                )}
              </div>
            ))}

            {!imageDetails?.findings?.length && (
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center">
                <CheckCircle className="w-12 h-12 text-green-500 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-green-700">
                  No vulnerabilities detected
                </h3>
                <p className="text-sm text-green-600 mt-1">
                  This image has passed all security checks
                </p>
              </div>
            )}
          </div>

          {/* Debug Information (Development Only) */}
          {process.env.NODE_ENV === 'development' && (
            <div className="bg-gray-100 p-4 rounded-lg mb-4 text-sm">
              <h3 className="font-medium mb-2">Debug Information</h3>
              <p>Repository Name: {repositoryName || 'Not set'}</p>
              <p>Image Digest: {imageDigest || 'Not set'}</p>
              <p>AWS Region: {awsCredentials?.region || 'Not set'}</p>
              <p>Selected Sources: {selectedSources.join(', ')}</p>
              <p>Total Findings: {imageDetails?.findings?.length || 0}</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

// export default VulnerabilityDetailsPage;

// export default VulnerabilityDetailsPage;
