// src/components/vulnerability/SourceSelector.jsx
import React from 'react';
import {
  BookOpen,
  MessageSquare,
  Code,
  Database,
  Check,
  ExternalLink,
} from 'lucide-react';
import { getSourceUrl } from '../../utils/sourceUrls';

export const SCRAPING_SOURCES = [
  {
    id: 'official',
    name: 'Official Documentation',
    icon: BookOpen,
    color: 'text-blue-600',
    bgColor: 'bg-blue-50',
    description: 'Vendor security advisories and official documentation',
  },
  {
    id: 'stackoverflow',
    name: 'Stack Overflow',
    icon: MessageSquare,
    color: 'text-orange-600',
    bgColor: 'bg-orange-50',
    description: 'Community discussions and solutions',
  },
  {
    id: 'github',
    name: 'GitHub Issues',
    icon: Code,
    color: 'text-gray-600',
    bgColor: 'bg-gray-50',
    description: 'Related issues and pull requests',
  },
  {
    id: 'cve',
    name: 'CVE Database',
    icon: Database,
    color: 'text-purple-600',
    bgColor: 'bg-purple-50',
    description: 'Common Vulnerabilities and Exposures details',
  },
];

export const SourceSelector = ({
  selectedSources,
  onSourceToggle,
  finding,
}) => (
  <div className="grid grid-cols-2 gap-3">
    {SCRAPING_SOURCES.map((source) => {
      const Icon = source.icon;
      const isSelected = selectedSources.includes(source.id);
      const isDisabled = source.id !== 'official';
      const sourceUrl = getSourceUrl(source, finding);

      return (
        <button
          key={source.id}
          onClick={() => onSourceToggle(source.id)}
          disabled={isDisabled}
          className={`
            relative flex flex-col p-3 rounded-lg border transition-all duration-200
            ${
              isSelected
                ? 'bg-blue-50/50 border-blue-200'
                : 'border-gray-200 hover:bg-gray-50'
            }
            ${isDisabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
            group
          `}
        >
          {/* Checkbox indicator */}
          <div
            className={`
            absolute top-2 right-2 w-4 h-4 rounded-full border transition-all duration-200
            flex items-center justify-center
            ${
              isSelected
                ? 'bg-blue-600 border-transparent'
                : 'border-gray-300 bg-white'
            }
          `}
          >
            {isSelected && <Check className="w-3 h-3 text-white" />}
          </div>

          <div className="flex min-h-[60px]">
            <Icon
              className={`w-4 h-4 mt-0.5 flex-shrink-0 ${source.color} ${
                isDisabled ? 'opacity-50' : ''
              }`}
            />
            <div className="ml-2.5 flex-1">
              <div className="flex items-center">
                <p
                  className={`text-sm font-medium ${
                    isSelected ? 'text-blue-600' : 'text-gray-900'
                  } ${isDisabled ? 'opacity-50' : ''}`}
                >
                  {source.name}
                </p>
                {isDisabled && (
                  <span className="ml-2 text-xs text-gray-500 px-1.5 py-0.5 bg-gray-100 rounded-full">
                    Soon
                  </span>
                )}
              </div>
              <p className="text-xs text-gray-500 mt-0.5 line-clamp-2">
                {source.description}
              </p>
            </div>
          </div>

          {sourceUrl && (
            <div className="mt-2 pt-2 border-t border-gray-100">
              <a
                href={sourceUrl}
                target="_blank"
                rel="noopener noreferrer"
                onClick={(e) => {
                  e.stopPropagation();
                  console.log(
                    `Visiting ${source.name} source for ${finding.name}`
                  );
                }}
                className={`
                  text-xs flex items-center 
                  ${
                    isDisabled
                      ? 'text-gray-400 cursor-not-allowed'
                      : 'text-gray-500 hover:text-gray-700'
                  }
                `}
              >
                {isDisabled ? (
                  'View Source'
                ) : (
                  <>
                    View on {source.name}
                    <ExternalLink className="w-3 h-3 ml-1" />
                  </>
                )}
              </a>
            </div>
          )}
        </button>
      );
    })}
  </div>
);
